---
# Source: ns1-webhook/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
---
# Grant the webhook permission to read the ConfigMap containing the Kubernetes
# apiserver's requestheader-ca-certificate.
# This ConfigMap is automatically created by the Kubernetes apiserver.
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook:webhook-authentication-reader
  namespace: kube-system
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: cert-manager-webhook-ns1-ns1-webhook
    namespace: default
---
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook:auth-delegator
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: cert-manager-webhook-ns1-ns1-webhook
    namespace: default
---
# Grant cert-manager permission to validate using our apiserver
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook:domain-solver
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
rules:
  - apiGroups:
      - acme.nsone.net
    resources:
      - '*'
    verbs:
      - 'create'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook:domain-solver
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager-webhook-ns1-ns1-webhook:domain-solver
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager

---
# Source: ns1-webhook/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 443
      targetPort: https
      protocol: TCP
      name: https
  selector:
    app: ns1-webhook
    release: cert-manager-webhook-ns1

---
# Source: ns1-webhook/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
spec:
  replicas: 
  selector:
    matchLabels:
      app: ns1-webhook
      release: cert-manager-webhook-ns1
  template:
    metadata:
      labels:
        app: ns1-webhook
        release: cert-manager-webhook-ns1
    spec:
      serviceAccountName: cert-manager-webhook-ns1-ns1-webhook
      containers:
        - name: ns1-webhook
          image: "ns1/cert-manager-webhook-ns1:latest"
          imagePullPolicy: Always
          args:
            - --tls-cert-file=/tls/tls.crt
            - --tls-private-key-file=/tls/tls.key
          env:
            - name: GROUP_NAME
              value: "acme.nsone.net"
          ports:
            - name: https
              containerPort: 443
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: https
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: https
          volumeMounts:
            - name: certs
              mountPath: /tls
              readOnly: true
          resources:
            {}
            
      volumes:
        - name: certs
          secret:
            secretName: cert-manager-webhook-ns1-ns1-webhook-webhook-tls

---
# Source: ns1-webhook/templates/apiservice.yaml
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1alpha1.acme.nsone.net
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
  annotations:
    certmanager.k8s.io/inject-ca-from: "default/cert-manager-webhook-ns1-ns1-webhook-webhook-tls"
spec:
  group: acme.nsone.net
  groupPriorityMinimum: 1000
  versionPriority: 15
  service:
    name: cert-manager-webhook-ns1-ns1-webhook
    namespace: default
  version: v1alpha1

---
# Source: ns1-webhook/templates/pki.yaml
---
# Create a selfsigned Issuer, in order to create a root CA certificate for
# signing webhook serving certificates
apiVersion: certmanager.k8s.io/v1alpha1
kind: Issuer
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook-selfsign
  namespace: "default"
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
spec:
  selfSigned: {}

---

# Generate a CA Certificate used to sign certificates for the webhook
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook-ca
  namespace: "default"
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
spec:
  secretName: cert-manager-webhook-ns1-ns1-webhook-ca
  duration: 43800h # 5y
  issuerRef:
    name: cert-manager-webhook-ns1-ns1-webhook-selfsign
  commonName: "ca.ns1-webhook.cert-manager"
  isCA: true

---

# Create an Issuer that uses the above generated CA certificate to issue certs
apiVersion: certmanager.k8s.io/v1alpha1
kind: Issuer
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook-ca
  namespace: "default"
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
spec:
  ca:
    secretName: cert-manager-webhook-ns1-ns1-webhook-ca

---

# Finally, generate a serving certificate for the webhook to use
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: cert-manager-webhook-ns1-ns1-webhook-webhook-tls
  namespace: "default"
  labels:
    app: ns1-webhook
    chart: ns1-webhook-0.1.0
    release: cert-manager-webhook-ns1
    heritage: Tiller
spec:
  secretName: cert-manager-webhook-ns1-ns1-webhook-webhook-tls
  duration: 8760h # 1y
  issuerRef:
    name: cert-manager-webhook-ns1-ns1-webhook-ca
  dnsNames:
  - cert-manager-webhook-ns1-ns1-webhook
  - cert-manager-webhook-ns1-ns1-webhook.default
  - cert-manager-webhook-ns1-ns1-webhook.default.svc

